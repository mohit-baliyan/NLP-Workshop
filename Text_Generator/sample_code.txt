
# coding: utf-8

# In[16]:


dataset =  "english_speech.txt"


# In[17]:


# Markov Chains

def load_text( filename ) :
    
    with open( filename, encoding = 'utf8' ) as f :
        
        return f.read().lower()


# In[18]:


text = load_text( dataset )


# In[19]:


print( text[:50] )


# In[ ]:


# From the dataset you want generate some X and Y pairs

# X is the sequence of 'K = 3' and Y is predicted character or K+1 the character

get_ipython().magic('pinfo the')

X      Y     Freq

the    " "    4
the    "n"    2
the    "y"    1
the    "i"    1
dea    "r"    1


# In[20]:


d = {
    
    "the" : {" ":4,"n":2,"i":1},
    
    "dea":{"r":1}
}


# In[21]:


d["the"]["i"]


# In[22]:


# table generation


# In[23]:


def generateTable( data, k = 4 ) :
    
    T = {}
    
    for i in range( len( data ) - k ) :
        
        X = data[i:i+k]
        
        Y = data[i+k]
        
        if T.get( X ) is None :
            
            T[X] = {}
            
            T[X][Y] = 1
            
        else :
            
            if T[X].get( Y ) is None :
                
                T[X][Y] = 1
                
            else :
                
                T[X][Y] += 1
                
    return T     


# In[24]:


T = generateTable( "Hello, the world of NLP, Helli NLPY word" )

T


# In[39]:


# frequency calculation of ( k + 1 )th character after k characters

def convertFreqIntoProb( T ) :
    
    for kx in T.keys():
        
        total_possibilities = float( sum( T[kx].values() ) )
        
        for k in T[kx].keys():
            
            T[kx][k] = T[kx][k]/total_possibilities
    
    return T        


# In[40]:


convertFreqIntoProb(T)


# In[41]:


def dataset_creation( data, k ) :
    
    T = generateTable( data, k )
    
    T = convertFreqIntoProb( T )
    
    return T


# In[42]:


T = dataset_creation( text, 4 )


# In[43]:


print( T )


# In[62]:


words = ["apple", "mango", "banana"]

prob = [.2, .6, .2]

import numpy as np


# In[63]:


for i in range( 10 ) :
    
    print( np.random.choice( words, p = prob ) )


# In[64]:


def sample_next( ctx, T ) :
    
    ctx = ctx[-4:]
    
    if T.get( ctx ) is None :
        
        return " "
    
    possible_chars = list( T[ctx].keys() )
    
    possible_values = list( T[ctx].values() )
    
    # print(possible_chars)
    
    # print(possible_values)
    
    return np.random.choice( possible_chars, p = possible_values )
    


# In[65]:


sample_next("any o",T)


# In[ ]:


# speech generation


# In[66]:


def generateText( starting_sent, maxLen = 10000 ) :
    
    speech_now = starting_sent
    
    ctx = starting_sent[-4:]
    
    for ix in range( maxLen ) :
        
        next_prediction = sample_next( ctx, T )
        
        speech_now += next_prediction
        
        ctx = speech_now[-4:]
    
    return speech_now


# In[67]:


print( generateText( "Brothers and Sisters" ) )


# In[68]:


# code generation

